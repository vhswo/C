#include<stdio.h>
#include<conio.h>
#include<Windows.h>
#include<time.h>

#define NULL 0
#define WALL_MAX 1
#define WALL_LV1 2
#define WALL_LV2 3
#define FLOG 44
#define ITEM 35
#define POINT_ITEM100 50
#define POINT_ITEM200 51
#define DOOR 36
#define DOOR2 37
#define SWITCH 38
#define MOVE_OBJECT 39
#define CHARGE 40
#define KEY 5
#define ENTRY_START 10
#define EXIT_START 20
#define CHARACTER_UP 6
#define CHARACTER 7
#define CHARACTER_LEFT 8
#define CHARACTER_RIGHT 9
#define LEFT 75
#define RIGHT 77
#define UP 72
#define DOWN 80
#define WIDTH 16
#define HEIGHT 16
#define X 1
#define Y 0
#define POTAL_MAX 2
#define DRILL 97
#define OPENACTION 115
#define PUSH 100


int Map[HEIGHT][WIDTH] =
{
	{1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
	{1,	7,	0,	2,	20,	2,	2,	2,	2,	2,	40,	0,	0,	0,	1},
	{1,	0,	0,	2,	2,	2,	2,	40,	2,	2,	0,	0,	39,	0,	1},
	{1,	2,	2,	40,	2,	2,	2,	2,	2,	2,	0,	0,	1,	0,	1},
	{1,	21,	2,	2,	2,	2,	2,	2,	2,	2,	0,	0,	38,	0,	1},
	{1,	2,	2,	2,	2,	2,	2,	2,	2,	2,	40,	2,	2,	2,	1},
	{1,	2,	2,	2,	2,	40,	2,	2,	2,	2,	2,	2,	2,	2,	1},
	{1,	2,	40,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	1},
	{1,	2,	2,	2,	2,	2,	2,	2,	40,	2,	2,	2,	2,	0,	1},
	{1,	2,	2,	2,	2,	2,	2,	2,	2,	2,	35,	2,	0,	10,	1},
	{1,	3,	3,	3,	3,	3,	40,	3,	3,	3,	3,	3,	3,	3,	1},
	{1,	0,	0,	3,	3,	3,	3,	3,	3,	3,	3,	3,	40,	3,	1},
	{1,	11,	0,	40,	3,	3,	3,	3,	3,	3,	40,	3,	3,	3,	1},
	{1,	1,	40,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
	{1,	5,	3,	3,	3,	3,	3,	3,	3,	3,	3,	37,	36,	44,	1},
	{1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1}
};

int character[2];
int Entry_Potal[POTAL_MAX][2];
int Exit_Potal[POTAL_MAX][2];
int SwitchObject[2];
int Door2[2];
int LastObjectIndex = NULL;
int iPower = 1;
int iKey = 0;
int iPoint = 0;
int iLimit = 5;

void Init();
void MapDraw();
void MoveCheck();
void Attack();
void EatItem();
void OpenAction();
void OutputMove();
void Move(int Num1, int Num2);
void MoveInput(int Num1, int Num2);
void MoveWallInput(int Num1, int Num2);
void MoveWall();
void DoorOpen();

int GetPoint();



/////////////////////////////////////////////////////////////////////////////////////////////////////////

void main()
{
	srand((unsigned)time(NULL));

	Init();

	while (1)
	{
		if (LastObjectIndex == FLOG)
			break;

		printf("\n방향키 조작 :\t↑ \t 드릴 : a\t문열기 : s\t◈밀기 : d\n\t      ←↓→\t 드릴 파워 : %d\t 키 보유 수 : %d\t드릴 가능 횟수 : %d\n포인트 점수 : %d\n", iPower, iKey,iLimit,  iPoint);
		MapDraw();
		OutputMove();
	}
}


///////////////////////////////////////////////////////////////////////////////////////////////////////

void OutputMove()
{
	char ch;
	ch = getch();
	system("cls");

	switch (ch)
	{
	case UP:
		Move(1, 0);
		break;

	case DOWN:
		Move(-1, 0);
		break;

	case LEFT:
		Move(0, 1);
		break;

	case RIGHT:
		Move(0, -1);
		break;

	case DRILL:
		Attack();
		break;

	case OPENACTION:
		OpenAction();
		break;

	case PUSH:
		MoveWall();
		break;
	}
}

void Init()
{
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			if (Map[y][x] == CHARACTER)
			{
				character[X] = x;
				character[Y] = y;
			}
			else if (Map[y][x] >= ENTRY_START && Map[y][x] < ENTRY_START + POTAL_MAX)
			{
				Entry_Potal[Map[y][x] - ENTRY_START][X] = x;
				Entry_Potal[Map[y][x] - ENTRY_START][Y] = y;
			}
			else if (Map[y][x] >= EXIT_START && Map[y][x] < EXIT_START + POTAL_MAX)
			{
				Exit_Potal[Map[y][x] - EXIT_START][X] = x;
				Exit_Potal[Map[y][x] - EXIT_START][Y] = y;
			}
			else if (Map[y][x] == SWITCH)
			{
				SwitchObject[X] = x;
				SwitchObject[Y] = y;
			}
			else if (Map[y][x] == DOOR2)
			{
				Door2[X] = x;
				Door2[Y] = y;
			}
		}
	}
};

void MapDraw()
{
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			if (Map[y][x] == WALL_MAX)
				printf("■");
			else if (Map[y][x] == CHARACTER)
				printf("▼");
			else if (Map[y][x] == CHARACTER_UP)
				printf("▲");
			else if (Map[y][x] == CHARACTER_RIGHT)
				printf("▶");
			else if (Map[y][x] == CHARACTER_LEFT)
				printf("◀");
			else if (Map[y][x] == WALL_LV1)
				printf("▤");
			else if (Map[y][x] == WALL_LV2)
				printf("▨");
			else if (Map[y][x] == NULL)
				printf("  ");
			else if (Map[y][x] == ITEM)
				printf("★");
			else if (Map[y][x] == FLOG)
				printf("㉿");
			else if (Map[y][x] >= ENTRY_START && Map[y][x] < ENTRY_START + POTAL_MAX)
				printf("◎");
			else if (Map[y][x] >= EXIT_START && Map[y][x] < EXIT_START + POTAL_MAX)
				printf("▣");
			else if (Map[y][x] == KEY)
				printf("¶");
			else if (Map[y][x] == DOOR)
				printf("▩");
			else if (Map[y][x] == DOOR2)
				printf("§");
			else if (Map[y][x] == MOVE_OBJECT)
				printf("◈");
			else if (Map[y][x] == SWITCH)
				printf("⊙");
			else if (Map[y][x] == POINT_ITEM100)
				printf("♤");
			else if (Map[y][x] == POINT_ITEM200)
				printf("♠");
			else if (Map[y][x] == CHARGE)
				printf("♥");

		}
		printf("\n");
	}
}

void MoveCheck()
{
	int index = Map[character[Y]][character[X]];
	if (index >= ENTRY_START && index < ENTRY_START + POTAL_MAX)
	{
		character[X] = Exit_Potal[index - ENTRY_START][X];
		character[Y] = Exit_Potal[index - ENTRY_START][Y];
	}
}

void AttackInput(int Num1, int Num2)
{
	int Point = rand() % 100;

	if (iLimit > 0)
	{
		if (iPower == 1)
		{
			if (Map[character[Y] - Num1][character[X] - Num2] == WALL_LV1)
			{
				if (Point < 20)
					Map[character[Y] - Num1][character[X] - Num2] = POINT_ITEM100;
				else
					Map[character[Y] - Num1][character[X] - Num2] = NULL;

				iLimit--;
			}
			else if(Map[character[Y] - Num1][character[X] - Num2] == WALL_LV2)
				iLimit--;
		}
		else if (iPower == 2)
		{
			if (Map[character[Y] - Num1][character[X] - Num2] == WALL_LV1 ||
				Map[character[Y] - Num1][character[X] - Num2] == WALL_LV2)
			{
				if (Point > 5 && Point < 25)
					Map[character[Y] - Num1][character[X] - Num2] = POINT_ITEM100;
				else if (Point >= 1 && Point <= 5)
					Map[character[Y] - Num1][character[X] - Num2] = POINT_ITEM200;
				else
					Map[character[Y] - Num1][character[X] - Num2] = NULL;

				iLimit--;
			}
			
		}
		
	}
	else if (iLimit == 0)
		return;
}

void Attack()
{
	if (Map[character[Y]][character[X]] == CHARACTER_UP)
		AttackInput(1, 0);

	else if (Map[character[Y]][character[X]] == CHARACTER)
		AttackInput(-1, 0);

	else if (Map[character[Y]][character[X]] == CHARACTER_RIGHT)
		AttackInput(0, -1);

	else if (Map[character[Y]][character[X]] == CHARACTER_LEFT)
		AttackInput(0, 1);
}

void EatItem()
{
	if (Map[character[Y]][character[X]] == ITEM)
	{
		Map[character[Y]][character[X]] = NULL;
		iPower++;
	}

	if (Map[character[Y]][character[X]] == KEY)
	{
		Map[character[Y]][character[X]] = NULL;
		iKey++;
	}

	if (Map[character[Y]][character[X]] == CHARGE)
	{
		Map[character[Y]][character[X]] = NULL;
		iLimit += 5;
	}

}

void OpenAction()
{
	if (Map[character[Y]][character[X] + 1] == DOOR)
	{
		if (iKey == 1)
			Map[character[Y]][character[X] + 1] = NULL;

		else
		{
			printf("\n키가 없습니다\n");
			system("pause");
		}
	}
}

void MoveInput(int Num1, int Num2)
{
	if (Num1 == 1 && Num2 == 0)
		Map[character[Y]][character[X]] = CHARACTER_UP;

	else if (Num1 == -1 && Num2 == 0)
		Map[character[Y]][character[X]] = CHARACTER;

	else if (Num1 == 0 && Num2 == 1)
		Map[character[Y]][character[X]] = CHARACTER_LEFT;

	else if (Num1 == 0 && Num2 == -1)
		Map[character[Y]][character[X]] = CHARACTER_RIGHT;
}

void Move(int Num1, int Num2)
{
	if (Map[character[Y] - Num1][character[X] - Num2] != WALL_MAX &&
		Map[character[Y] - Num1][character[X] - Num2] != WALL_LV1 &&
		Map[character[Y] - Num1][character[X] - Num2] != WALL_LV2 &&
		Map[character[Y] - Num1][character[X] - Num2] != DOOR &&
		Map[character[Y] - Num1][character[X] - Num2] != DOOR2 &&
		Map[character[Y] - Num1][character[X] - Num2] != MOVE_OBJECT)
	{
		Map[character[Y]][character[X]] = LastObjectIndex;

		if (Num1 == 1 && Num2 == 0)
			character[Y]--;

		else if (Num1 == -1 && Num2 == 0)
			character[Y]++;

		else if (Num1 == 0 && Num2 == 1)
			character[X]--;

		else if (Num1 == 0 && Num2 == -1)
			character[X]++;

		DoorOpen();
		MoveCheck();
		GetPoint();
		EatItem();
		LastObjectIndex = Map[character[Y]][character[X]];

		MoveInput(Num1, Num2);
	}
	else
		MoveInput(Num1, Num2);
}

void MoveWallInput(int Num1, int Num2)
{
	if (Map[character[Y] - Num1][character[X] - Num2] == MOVE_OBJECT &&
		Map[character[Y] - Num1 * 2][character[X] - Num2 * 2] != WALL_MAX &&
		Map[character[Y] - Num1 * 2][character[X] - Num2 * 2] != WALL_LV1 &&
		Map[character[Y] - Num1 * 2][character[X] - Num2 * 2] != WALL_LV2 &&
		Map[character[Y] - Num1 * 2][character[X] - Num2 * 2] != DOOR &&
		Map[character[Y] - Num1 * 2][character[X] - Num2 * 2] != DOOR2 &&
		Map[character[Y] - Num1 * 2][character[X] - Num2 * 2] != MOVE_OBJECT)
	{
		Map[character[Y] - Num1][character[X] - Num2] = NULL;
		Map[character[Y] - Num1 * 2][character[X] - Num2 * 2] = MOVE_OBJECT;
	}

}

void MoveWall()
{
	if (Map[character[Y]][character[X]] == CHARACTER_UP)
		MoveWallInput(1, 0);

	else if (Map[character[Y]][character[X]] == CHARACTER)
		MoveWallInput(-1, 0);

	else if (Map[character[Y]][character[X]] == CHARACTER_RIGHT)
		MoveWallInput(0, -1);

	else if (Map[character[Y]][character[X]] == CHARACTER_LEFT)
		MoveWallInput(0, 1);
}

void DoorOpen()
{
	if (Map[SwitchObject[Y]][SwitchObject[X]] == MOVE_OBJECT)
		Map[Door2[Y]][Door2[X]] = NULL;

	else
	{
		Map[SwitchObject[Y]][SwitchObject[X]] = SWITCH;
		Map[Door2[Y]][Door2[X]] = DOOR2;
	}
}

int GetPoint()
{
	if (Map[character[Y]][character[X]] == POINT_ITEM100)
	{
		Map[character[Y]][character[X]] = NULL;
		return iPoint += 100;
	}
	else if (Map[character[Y]][character[X]] == POINT_ITEM200)
	{
		Map[character[Y]][character[X]] = NULL;
		return iPoint += 200;
	}
}